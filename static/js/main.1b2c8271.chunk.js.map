{"version":3,"sources":["logo.svg","useAddToHomescreenPrompt.js","One.js","Two.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","installed","One","useState","dummy","setDummy","className","id","onChange","e","target","value","type","onClick","App","prompt","setState","isVisible","setVisible","useEffect","ready","preventDefault","hide","window","addEventListener","removeEventListener","callback","userChoice","then","choiceResult","outcome","Promise","resolve","reject","Error","useAddToHomescreenPrompt","promptToInstall","hidden","to","path","component","Two","src","logo","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1b2c8271.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import {useEffect, useState}  from \"react\";\r\nlet installed = false;\r\nexport function useAddToHomescreenPrompt() {\r\n    const [prompt, setState] = useState(null);\r\n    const [isVisible, setVisible] = useState(false);\r\n    //const [installed, setInstalled] = useState(false);\r\n    const promptToInstall = (callback) => {\r\n        if (prompt) {\r\n            //return  prompt.prompt();\r\n            prompt.prompt();\r\n            prompt.userChoice.then((choiceResult) => {\r\n                if (choiceResult.outcome === 'accepted') {\r\n                    //setInstalled(true);\r\n                    installed = true;\r\n                    setVisible(false);\r\n                }\r\n            });\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(new Error('Tried installing before browser sent \"beforeinstallprompt\" event'));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const ready = (e) => {\r\n            e.preventDefault();\r\n            if (!installed){\r\n                setState(e);\r\n                setVisible(true);    \r\n            }\r\n        };\r\n        const hide = () => {setVisible(false)};\r\n        window.addEventListener(\"beforeinstallprompt\", ready);\r\n        window.addEventListener('appinstalled', hide);\r\n        return () => {\r\n            window.removeEventListener(\"beforeinstallprompt\", ready);\r\n            window.removeEventListener(\"appinstalled\", hide);\r\n        };\r\n    }, []);\r\n    return [isVisible, setVisible, promptToInstall];\r\n}\r\n","import React, {useState} from 'react';\r\n\r\n\r\n\r\nfunction One() {\r\n  const [dummy, setDummy] = useState(0)\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <input id=\"intro\" onChange={e=> setDummy(e.target.value)} type=\"number\" />\r\n        <p>{dummy}</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default One;\r\n","import React, {useState} from 'react';\r\n\r\n\r\n\r\nfunction One() {\r\n  const [dummy, setDummy] = useState(0)\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <input id=\"intro\" onChange={e=> setDummy(e.target.value)} type=\"number\" />\r\n        <button onClick={e=>setDummy(null)} >Clear</button>\r\n        <p>{dummy}</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default One;\r\n","import React  from 'react';\r\nimport {Link, BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport { useAddToHomescreenPrompt } from \"./useAddToHomescreenPrompt.js\";\r\nimport logo from './logo.svg';\r\nimport One from './One';\r\nimport Two from './Two';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  const [isVisible, setVisible, promptToInstall] = useAddToHomescreenPrompt();\r\n  const hide = () => { setVisible(false)};\r\n\r\n\r\n  return (\r\n      <Router >\r\n        <nav>\r\n          <div  hidden={!isVisible}>\r\n            <button onClick={hide}>Close</button>\r\n              Hello! Wanna add to homescreen?\r\n            <button onClick={promptToInstall}>Add to homescreen</button>\r\n          </div>\r\n          <ul>\r\n            <li>\r\n            <Link to=\"/install-test/one\">One</Link>\r\n            </li>\r\n            <li>\r\n            <Link to=\"/install-test/two\">Two</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/install-test/one\" component={One} />\r\n          <Route path=\"/install-test/two\" component={Two} />\r\n          <Route path=\"/install-test\">\r\n            <header className=\"App-header\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </header>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}